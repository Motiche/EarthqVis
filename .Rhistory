Predictions =pred(X,B0_stochastic,B1_stochastic)
print(MSE(Predictions, Y))
Bs = Analytical_sol(X,Y)
B0_analytical = Bs[1]
B1_analytical = Bs[2]
Predictions =pred(X,B0_analytical,B1_analytical)
print(MSE(Predictions, Y))
Bs = lm(data = data, LC50 ~MLOGP)
B0_lm = as.numeric(Bs$coefficients[1])
B1_lm = as.numeric(Bs$coefficients[2])
lm_pred = predict(Bs, MLOGP = X,interval = "prediction")
MSE(lm_pred[,1],Y)
Predictions =pred(X,B0_lm,B1_lm)
print(MSE(Predictions, Y))
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))
# Gradient Descend function with "batch" and "stochastic" mode
Grad_des <- function(alpha, epoch,X,Y, converging_alpha = F, mode = c("batch", "stochastic")){
B0 = runif(1,0,1)
B1 = runif(1,0,1)
n = nrow(X)
if (converging_alpha == T){
alphas = seq(2*alpha, 0, -2*alpha/epoch)
}else{
alphas = rep(alpha, epoch)
}
if( mode == "batch"){
for(i in 1:epoch){
alpha = alphas[i]
Predictions =pred(X,B0,B1)
print(MSE(Predictions, Y))
diff = Y - Predictions
B0 = B0 + alpha* sum(diff)/n
B1 = B1 + alpha* sum(X*diff)/n
}
return(c(B0, B1))
}
if ( mode == "stochastic"){
for(i in 1:nrow(X)){
#I = sample(1:nrow(X),1)
x = as.numeric(X[i])
y = as.numeric(Y[i])
Predictions =pred(x,B0,B1)
print(MSE(Predictions, y))
diff =  as.numeric(y - Predictions)
B0 = B0 + alpha* diff
B1 = B1 + alpha* x*diff
}
return(c(B0, B1))
}
}
Bs = Grad_des(0.01, 500, X, Y, converging_alpha = F, mode = "stochastic")
B0_stochastic = Bs[1]
B1_stochastic = Bs[2]
Predictions =pred(X,B0_stochastic,B1_stochastic)
print(MSE(Predictions, Y))
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))
##############################################
##                Third part                ##
##                                          ##
##############################################
indeces = sample(1:nrow(X), nrow(X)/2)
Training = data[indeces,]
Test = data[-indeces,]
Training
Test
Training
indeces = sample(1:nrow(data), nrow(data)/2)
Training = data[indeces,]
Test = data[-indeces,]
X = Training[,2]
Y = Training[,1]
Bs = Grad_des(0.07, 400, X, Y, converging_alpha = T, mode = "batch")
B0_batch = Bs[1]
B1_batch = Bs[2]
Bs = Grad_des(0.01, 500, X, Y, converging_alpha = F, mode = "stochastic")
B0_stochastic = Bs[1]
B1_stochastic = Bs[2]
Bs = Analytical_sol(X,Y)
B0_analytical = Bs[1]
B1_analytical = Bs[2]
Bs = lm(data = data, LC50 ~MLOGP)
B0_lm = as.numeric(Bs$coefficients[1])
B1_lm = as.numeric(Bs$coefficients[2])
X = Test[,2]
Y = Test[,1]
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))
X = Training[,2]
Y = Training[,1]
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))+
ggtitle("Preformance and MSEs on the Training data")
indeces = sample(1:nrow(data), nrow(data)/2)
Training = data[indeces,]
Test = data[-indeces,]
X = Training[,2]
Y = Training[,1]
Bs = Grad_des(0.07, 400, X, Y, converging_alpha = T, mode = "batch")
B0_batch = Bs[1]
B1_batch = Bs[2]
Bs = Grad_des(0.01, 500, X, Y, converging_alpha = F, mode = "stochastic")
B0_stochastic = Bs[1]
B1_stochastic = Bs[2]
Bs = Analytical_sol(X,Y)
B0_analytical = Bs[1]
B1_analytical = Bs[2]
Bs = lm(data = data, LC50 ~MLOGP)
B0_lm = as.numeric(Bs$coefficients[1])
B1_lm = as.numeric(Bs$coefficients[2])
X = Training[,2]
Y = Training[,1]
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))+
ggtitle("Preformance and MSEs on the Training data")
X = Test[,2]
Y = Test[,1]
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"))+
ggtitle("Preformance and MSEs on the test data")
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point", color = "white"))
library(ggplot2)
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point", color = "white"))
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point", color = "White"))
ggplot(data, aes(x = MLOGP, y = LC50))+
geom_point()+
geom_abline(aes(slope = B1_batch, intercept = B0_batch, color = paste0("Batch, MSE:", round(MSE(pred(X,B0_batch,B1_batch), Y),2))), size = 1)+
geom_abline(aes(slope = B1_stochastic, intercept = B0_stochastic , color = paste0("Stochastic, MSE:",round(MSE(pred(X,B0_stochastic,B1_stochastic), Y),2))), size = 1)+
geom_abline(aes(slope = B1_analytical, intercept = B0_analytical, color = paste0("Analytical, MSE:",round(MSE(pred(X,B0_analytical,B1_analytical), Y),2))), size = 1)+
geom_abline(aes(slope = B1_lm, intercept = B0_lm, color = paste0("lm, MSE:",round(MSE(pred(X,B0_lm,B1_lm), Y),2))), size = 1)+
labs(colour="Batch","Stochastic", "Analytical", "lm") +
geom_point(aes(x = mean(X), y = mean(Y)), color = "red", size = 2) +
geom_text(data = data.frame(x = mean(X), y = mean(Y)), aes(x, y, label = "Mean point"),color= "white")
source("C:/Users/Motiche/Desktop/R Capstone/1.R")
source("C:/Users/Motiche/Desktop/R Capstone/2.R")
eq_map(ex_data, "LOCATION_NAME")
# https://rstudio.github.io/leaflet/markers.html
#install.packages("leaflet")
library(leaflet)
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup=data[annot_col],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.2,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup=~annot_col,
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.2,
stroke = 0.1)
return(m)
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup=~annot_col,
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.2,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.2,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.1,
lwd = 0.1,
stroke = 0.1)
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.1,
lwd = 0.1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~sqrt(EQ_PRIMARY)*30,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~sqrt(EQ_PRIMARY)*1000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~sqrt(EQ_PRIMARY)*1000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~sqrt(EQ_PRIMARY)*10000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*3000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*500,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*1000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
eq_map(ex_data, "LOCATION_NAME")
data %>%
#eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data()
View(readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data())
source("C:/Users/Motiche/Desktop/R Capstone/1.R")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*3000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map(ex_data, "LOCATION_NAME")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*10000,
#color = ~pal(type),
fillOpacity = 0.1,
weight =1,
stroke = 0.1)
return(m)
}
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
eq_map <- function(data, annot_col){
m <- leaflet(data) %>%
addTiles() %>%
addCircles(~LONGITUDE, ~LATITUDE,
popup= ~data[[annot_col]],
radius =  ~EQ_PRIMARY*10000,
#color = ~pal(type),
fillOpacity = 0.2,
weight =1,
stroke = 0.1)
return(m)
}
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
stringr::str_glue('<b>Location: </b>"{data$LOCATION_NAME}<br/>"')
stringr::str_glue('<b>Location: </b>{data$LOCATION_NAME}<br/>')
Loc <- ifelse(nchar(data$LOCATION_NAME)>0, "<b>Location: </b>","")
Loc <- stringr::str_glue('{Loc}{data$LOCATION_NAME}')
Loc
Loc <- ifelse(nchar(data$LOCATION_NAME)>10, "<b>Location: </b>","")
Loc <- stringr::str_glue('{Loc}{data$LOCATION_NAME}')
Loc
Loc <- ifelse(nchar(data$LOCATION_NAME)>0,
stringr::str_glue('<b>Location: </b>{data$LOCATION_NAME}'),
"")
Loc
Death <- ifelse(!is.na(data$TOTAL_DEATHS),
stringr::str_glue('<b>Total deaths: </b>{data$TOTAL_DEATHS}<br/>'),
"")
Death
data$TOTAL_DEATHS
Death <- ifelse(!is.na(data$TOTAL_DEATHS),
stringr::str_glue('<b>Total deaths: </b>{as.numeric(data$TOTAL_DEATHS)}<br/>'),
"")
Death
Mag <- ifelse(!is.na(data$EQ_PRIMARY),
stringr::str_glue('<b>Magnitude: </b>{data$EQ_PRIMARY}'),
"")
Mag
eq_create_label <- function(data){
Loc <- ifelse(nchar(data$LOCATION_NAME)>0,
stringr::str_glue('<b>Location: </b>{data$LOCATION_NAME}<br/>'),
"")
Death <- ifelse(!is.na(data$TOTAL_DEATHS),
stringr::str_glue('<b>Total deaths: </b>{as.numeric(data$TOTAL_DEATHS)}<br/>'),
"")
Mag <- ifelse(!is.na(data$EQ_PRIMARY),
stringr::str_glue('<b>Magnitude: </b>{data$EQ_PRIMARY}'),
"")
return(paste0(Loc,Death,Mag))
}
eq_create_label(data)
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "IRAN" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "IRAN" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::filter(lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
readr::read_delim("C:/Users/Motiche/Downloads/signif.txt") %>%
eq_clean_data() %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
setwd("C:/Users/Motiche/Desktop/R Capstone/EarthqVis/")
/
?use_appveyor
usethis::use_appveyor()
usethis::use_appveyor_badge()
